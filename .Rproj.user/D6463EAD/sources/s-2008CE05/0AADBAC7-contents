---
title: "R Notebook"
output: html_notebook
---


Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 
```{r}
library(tidyverse)
library(magrittr)

sandy_data <-read_csv("https://raw.githubusercontent.com/dianaplunkett/607/main/sandy-311-calls-by-day.csv")
```
<H1> Managing the Year </H1>

First things first, let's split the year off in order to synchronize with Diana's year based approach

```{r}
print(str_sub("10/22/12", -2))
sandy_data$date = paste0("20",str_sub(sandy_data$date, -2))
head(sandy_data)
```
From there, let's summarise the data, adding all values by date together.

```{r}
sandy_data_by_year <- sandy_data %>% group_by(date) %>% 
  summarise(across(everything(), sum))
```

Now at this point let's pause and take a quick peek at the data to ensure that we have properly structured everything.

```{r}
head(sandy_data_by_year)
```

<H1> Data Pivoting </H1>

First things first, lets pivot the data

```{r}
sandy_call_breakdown <- sandy_data_by_year %>% pivot_longer(!date, names_to = "Department", values_to = "Call_Count", values_drop_na = TRUE)
head(sandy_call_breakdown)
```

Then let's extract out the totals per year

```{r}
call_count_year <-sandy_call_breakdown[(sandy_call_breakdown$Department=="total"),]
head(call_count_year)
sandy_call_breakdown<-sandy_call_breakdown[!(sandy_call_breakdown$Department=="total"),]
```

Now lets calculate the call percentage. 

```{r}
length <- NROW(sandy_call_breakdown)
sandy_call_breakdown$Call_percentage = 0
for (row_number in 1:length){
  print(row_number)
  sandy_call_breakdown$Call_percentage[row_number] = sandy_call_breakdown$Call_Count[row_number]/(call_count_year$Call_Count[call_count_year$date==sandy_call_breakdown$date[row_number]])
}
head(sandy_call_breakdown,20)
```

Now lets grab just the top 5 Departments by year.

```{r}
get_top5 <- function(x) {
    top5 <-sandy_call_breakdown %>% 
    filter(date == x) %>%
    arrange(desc(Call_percentage)) %>%
    head(5)
    return(top5)
}


year_start = 2012
year_end = 2017
df_test <- get_top5(year_start)
if ((year_end-year_start)> 1){
  for (i in (year_start+1):year_end) {
     #print()
     df_test <- union (df_test, get_top5(i))
  }
}
all_top5 <- df_test
head(all_top5)
```

And finally let's make a chart

```{r}
color_map<-tibble(type= c('2012', '2013', '2014','2015', '2016', '2017'), 
                  color = c('#154360', '#2980b9', '#5aa8dc', 
                            '#a9cce3', '#aed6f1',  '#ebf5fb' ))

all_top5 %>% ggplot() +
    geom_col(mapping = aes(x=Department, y=Call_percentage, fill=date)) + 
    scale_fill_manual(values=color_map$color) +
    coord_flip() +
    ggtitle("Top 5 Agencies involved in 311 calls about Huricane Sandy by Year") + 
    ylab('% total calls made in a year')+
    xlab("Agency")
```
<H1> Conclusion </H1>   

We could possibly extend this by creating a look up table using something akin to: https://nychazardmitigation.com/acronyms/ to populate all of the various department values. 

All in all, I liked my adjustments as I thought they made things more efficient. 